<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>个人成长 on carlos</title>
        <link>https://hugo-ap0.pages.dev/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/</link>
        <description>Recent content in 个人成长 on carlos</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Sat, 15 Mar 2025 02:24:40 +0800</lastBuildDate><atom:link href="https://hugo-ap0.pages.dev/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>区分架构、系统、框架、方法论</title>
        <link>https://hugo-ap0.pages.dev/p/%E5%8C%BA%E5%88%86%E6%9E%B6%E6%9E%84%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%E6%96%B9%E6%B3%95%E8%AE%BA/</link>
        <pubDate>Sat, 15 Mar 2025 02:02:36 +0800</pubDate>
        
        <guid>https://hugo-ap0.pages.dev/p/%E5%8C%BA%E5%88%86%E6%9E%B6%E6%9E%84%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%E6%96%B9%E6%B3%95%E8%AE%BA/</guid>
        <description>&lt;img src="https://hugo-ap0.pages.dev/bg/36.webp" alt="Featured image of post 区分架构、系统、框架、方法论" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言
&lt;/h2&gt;&lt;p&gt;架构、系统、框架、方法论并非描述同一事物，不要混淆概念&lt;/p&gt;
&lt;h2 id=&#34;核心定义差异&#34;&gt;核心定义差异
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由关联的个体组成，按规则协作形成整体能力的实体。例如：电商系统由订单、支付、库存等子系统构成，各子系统通过接口规则协作完成交易‌。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统的顶层结构设计，包含子系统/模块/组件的划分、协作关系及约束原则。例如：微服务架构通过服务拆分、API网关、容错机制定义技术路线‌。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解决特定问题的半成品工具或规范，提供可直接使用的技术能力。例如：Spring框架提供依赖注入、事务管理等基础功能，开发者基于此扩展业务逻辑‌。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法论&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解决问题的理论体系或指导原则，不涉及具体实现。例如：敏捷开发方法论强调迭代交付，但不会直接生成代码‌。&lt;/p&gt;
&lt;h2 id=&#34;层级关系与协作模式&#34;&gt;层级关系与协作模式
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;概念&lt;/th&gt;
&lt;th&gt;层级定位&lt;/th&gt;
&lt;th&gt;协作关系示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;系统&lt;/td&gt;
&lt;td&gt;实体层（实际运行的软件）&lt;/td&gt;
&lt;td&gt;基于架构设计实现功能，依赖框架加速开发‌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;架构&lt;/td&gt;
&lt;td&gt;结构层（设计蓝图）&lt;/td&gt;
&lt;td&gt;指导系统实现，可能通过框架落地核心机制‌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;框架&lt;/td&gt;
&lt;td&gt;工具层（可复用技术组件）&lt;/td&gt;
&lt;td&gt;受架构约束，为系统提供基础能力‌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;方法论&lt;/td&gt;
&lt;td&gt;抽象层（理论指导）&lt;/td&gt;
&lt;td&gt;驱动架构设计过程（如DDD方法论）‌&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;混淆场景与区分标准&#34;&gt;混淆场景与区分标准
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;架构 vs 框架&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;架构是结构设计（如分层架构），框架是具体实现工具（如Spring MVC框架）‌&lt;/li&gt;
&lt;li&gt;架构决策可借助框架落地，但架构本身不包含代码‌。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;系统 vs 架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统是实体，架构是系统的抽象描述。例如：微信是系统，其架构描述聊天/支付等模块的交互关系‌。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法论 vs 架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方法论是设计思想（如微服务设计原则），架构是方法论指导下的具体结构输出‌。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;系统‌是实体，‌架构‌是其结构，‌框架‌是构建工具，‌方法论‌是设计指导思想。&lt;/li&gt;
&lt;li&gt;实际开发中：方法论 → 架构设计 → 选择框架 → 实现系统‌。&lt;/li&gt;
&lt;li&gt;若混淆这些概念，可能导致技术选型偏差（如误将框架等同于架构）或设计缺乏扩展性（如忽略方法论指导）。需根据目标层级明确概念边界。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在软件工程的知识体系中，“方法论→架构设计→选择框架→实现系统”这一递进链确实存在更抽象的上层概念。根据现有理论体系和实践积累，可将其抽象层次进一步向上延伸至哲学层面的元模型和思维范式。&lt;/p&gt;
&lt;p&gt;在抽象层次体系中，现实生活中的做事策略属于‌方法论与架构设计之间的战术层‌。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
