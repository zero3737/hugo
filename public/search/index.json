[{"content":"前言 本文主要主题是通过 github 页面，修改默认分支。\n操作 找到 Settings\n点击该图标，就能切换分支\n修改成功截图\n","date":"2025-03-11T05:36:53+08:00","image":"https://zero3737.github.io/hugo/bg/53.jpg","permalink":"https://zero3737.github.io/hugo/p/github-%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF/","title":"github 修改默认分支"},{"content":"前言 hugo 配合 github action 实现自动化部署，例如将 hugo 源码推送到 github 仓库，通过 github 服务器的 hugo 服务生成静态文件，最后自动发布到 main 分支。\n实操 github 创建 source 分支用来存放源码，然后在本地 git 仓库新建 .github/workflows 目录，文件名不能改变，这是 github action 默认识别路径。\n在该目录下创建 任意名称.yaml，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 name: Deploy Hugo to GitHub Pages on: push: branches: [ source ] # 仅监控source分支的推送 jobs: deploy: runs-on: ubuntu-latest steps: - name: 监测 source 分支 uses: actions/checkout@v4 with: ref: source # 明确检出source分支 - name: hugo 设置 uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.125.7\u0026#39; # 指定Hugo版本 extended: true # 启用扩展版 - name: 删除符号链接 run: rm -f /home/runner/work/hugo/hugo/static/_resources - name: 复制图片 run: cp -r //home/runner/work/hugo/hugo/static/00-assets/ /home/runner/work/hugo/hugo/static/_resources - name: hugo 生成静态文件 run: hugo --minify --gc - name: 发布到 main 分支 uses: peaceiris/actions-gh-pages@v4 with: deploy_key: ${{ secrets.SSH_PRIVATE_KEY }} publish_dir: ./public publish_branch: main # 正确参数名称 force_orphan: true # 强制覆盖目标分支 env: # 配置 Git 用户信息 GIT_USER_NAME: \u0026#34;root\u0026#34; GIT_USER_EMAIL: \u0026#34;root@localhost\u0026#34; runs-on 指定环境，可以指定 windows、ubuntu 以及 macos on 为事件，自动执行脚本的事件，这里为 push 自动触发脚本 name 为注释 uses 为使用模块，这里加载了 actions/checkout@v4、peaceiris/actions-hugo@v2 等待模块 run 为执行命令，这里为 ubuntu 环境，所以都是 ubuntu 命令 ${{ secrets.SSH_PRIVATE_KEY }} 为变量名，我是通过 ssh 方式推送到 main 分支，用到 peaceiris/actions-gh-pages@v4 模块，其他为官方默认配置，不必理会 将本地 git 公钥和私钥配置到 github，我这里默认已经配置好公钥，只需要将私钥配置到 action 即可\n要想 github action 识别 ${{ secrets.SSH_PRIVATE_KEY }} 变量，需要手动配置，找到 Settings\n注意变量名要一致，我这里为 SSH_PRIVATE_KEY，用的时候是 ${{ secrets.SSH_PRIVATE_KEY }}\n将 git 仓库推送到 github source 分支即可自动构建，点击进去，即可排查错误\n","date":"2025-03-11T05:07:03+08:00","image":"https://zero3737.github.io/hugo/bg/03.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-%E9%85%8D%E5%90%88-github-action-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/","title":"hugo 配合 github action 自动化部署"},{"content":"前言 github 页面怎么创建新分支？有两种办法，一是通过网页创建，二是通过本地 git 命令创建，然后推送到远程仓库。本文主要通过网页图形化界面创建。\n实操 找到 Branch\n点击 New branch 按钮\nYour branches‌ 和 ‌Active branches GitHub 界面中显示的 ‌Your branches‌ 和 ‌Active branches‌ 是两种不同的分支分类方式\nYour branches‌ 是当前用户（即你）在仓库中创建的所有分支，包括本地推送或直接在 GitHub 网页创建的分支‌。\nActive branches 仓库中所有活跃的分支（包括 main、dev 等主分支及近期有更新的分支），无论创建者是谁‌。\n","date":"2025-03-11T02:35:32+08:00","image":"https://zero3737.github.io/hugo/bg/32.jpg","permalink":"https://zero3737.github.io/hugo/p/github-%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%86%E6%94%AF/","title":"github 创建新分支"},{"content":"前言 我的部分文章是 joplin 导出，而静态资源是存放在 _resources 目录。GitHub Pages 默认启用 Jekyll 引擎，会忽略以下划线 _ 开头的目录（如 _resources）‌。\n解决方案 禁用 Jekyll 处理\n在项目根目录或发布分支（如 gh-pages）中添加空文件 .nojekyll，以阻止 Jekyll 过滤特殊命名目录‌。\n在 hugo public 目录运行命令\n1 touch .nojekyll 确保 .nojekyll 文件被提交到 Git 仓库中。\n访问成功，不会出现 404 错误。\n","date":"2025-03-11T00:33:02+08:00","image":"https://zero3737.github.io/hugo/bg/02.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-%E9%83%A8%E7%BD%B2%E5%88%B0-github-pages-%E9%83%A8%E5%88%86%E6%96%87%E7%AB%A0-404/","title":"hugo 部署到 github pages 部分文章 404"},{"content":"前言 本文主题是 hugo 怎么部署到 github pages\n实操 设置 baseurl，不然会样式错误。\n将 public 目录下的静态文件上传到 github，找到 Settings\n找到 pages，设置分支，设置根目录，保存即可。\n如果 username.github.io 作为仓库名，直接访问即可，我的是 hugo 作为仓库名，所以要在后面加 hugo 目录，完整 url：username.github.io/hugo\n访问成功截图\n","date":"2025-03-10T23:44:35+08:00","image":"https://zero3737.github.io/hugo/bg/35.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-%E9%83%A8%E7%BD%B2%E5%88%B0-github-pages/","title":"hugo 部署到 github pages"},{"content":"前言 提前配置好 git 仓库，配置好 ssh，该脚本是在 ssh 配置完成下编写，不然要输入用户名和密码\n实操 新建 sh 文件，内容如下\n1 2 3 4 5 6 7 cd /root/hugo hugo cd /root/hugo/public git add . git commit -m \u0026#34;auto commit: $(date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; git push origin main sudo nohup sh /root/shell/hugo.sh start \u0026amp;\u0026gt;\u0026gt; /root/shell/shell.log \u0026amp; 宝塔创建计划任务\n宝塔定时执行脚本即可\n可以手动执行，测试脚本\n","date":"2025-03-10T05:53:27+08:00","image":"https://zero3737.github.io/hugo/bg/27.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-%E5%AE%9A%E6%97%B6%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81/","title":"hugo 定时推送代码"},{"content":"前言 如果使用 https 方式推送代码，每次推送代码都需要输入用户名和密码，不方便，也不利于创建脚本\n生成 SSH 密钥对 执行密钥生成命令\n1 ssh-keygen -t rsa -b 4096 -C \u0026#34;root@localhost\u0026#34; 这里的账户填写本地 git 账户，而非 github 账号\n默认回车 3 次\n密钥生成后，id_rsa 为私钥（需保密），id_rsa.pub 为公钥（需上传）‌\n查看公钥内容\n1 cat ~/.ssh/id_rsa.pub github 添加公钥 主页头像 -\u0026gt; \u0026ldquo;Settings\u0026rdquo;\n找到 \u0026ldquo;New SSH key\u0026rdquo;\n输入 github 账户密码\n配置 git 使用 ssh 协议 查看当前远程仓库协议\n1 git remote -v 若为 https 协议，需改为 ssh 格式\n1 git remote set-url origin git@github.com:zero3737/hugo.git 仓库改为自己的\n测试 ssh 连接 验证密钥配置是否成功\n1 ssh -T git@github.com 推送代码 出现 Are you sure you want to continue connecting (yes/no/[fingerprint])? 输入 yes 即可，此提示是 SSH 客户端的安全验证机制，在首次连接到某台服务器时触发。\n","date":"2025-03-10T05:08:44+08:00","image":"https://zero3737.github.io/hugo/bg/44.jpg","permalink":"https://zero3737.github.io/hugo/p/github-ssh-%E5%85%8D%E5%AF%86%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81/","title":"github ssh 免密推送代码"},{"content":"github 新建仓库 github 仓库主页选择 new\n输入仓库名，‌然后选择公开（Public）或私有（Private）权限‌。\n划到底部，点击 “Create repository” 即可新建完毕\nubuntu 安装 git ubuntu 默认安装 git，呵呵，没有安装执行以下命令\n一、更新系统软件包列表\n1 sudo apt update 二、执行安装命令\n1 sudo apt install git -y 三、验证安装结果\n1 git --version 初始化 git 配置 git 用户名和邮箱\n1 2 git config --global user.name \u0026#34;root\u0026#34; git config --global user.email \u0026#34;root@localhost\u0026#34;‌ 查看全局配置\n1 2 git config --global user.name git config --global user.email 运行结果\n补充说明\nGit 全局配置中的用户名和邮箱均可完全自定义（如 root 和 root@localhost）。这两个命令设置的名字和邮箱会出现在每次提交记录中，而用户名的自定义是允许的，只要符合一定的规范。\n在团队项目中，建议使用真实姓名或可识别昵称，便于追溯提交记录‌。\n关联本地与远程仓库 本地初始化仓库并关联远程地址\n1 2 git init git remote add origin git@github.com:YourName/RepoName.git‌ 上传代码 手动提交命令，提交到本地 git\n1 2 git add . # 添加所有文件到暂存区 git commit -m \u0026#34;提交说明\u0026#34;‌ 重命名当前分支为 main‌\n1 git branch -M main 补充说明\n若通过 git init 初始化仓库后需将默认分支从 master 改为 main，执行一次 git branch -M main 即可永久生效‌。 强制重命名当前本地分支‌（例如将默认分支从 master 改为 main），与 GitHub 仓库名无关‌。这是 git 本地命令。 推送到 github 仓库\n1 git push -u origin main 补充说明：\n会将当前本地分支‌推送到远程仓库的 source 分支，并建立追踪关系（-u 参数的作用）‌。若远程 source 分支不存在，此命令会自动创建该分支‌。 本地分支名与远程分支名 ‌无需相同‌。例如，本地分支为 main，仍可推送至远程 source 分支‌。 后续使用 git push（不带参数）时，默认推送至已关联的远程分支（即 source）‌。 当本地分支名与远程分支名不一致时，‌需通过参数或配置明确指定映射关系‌，否则会因默认规则冲突导致推送失败‌。\n1 git push -u origin 本地分支名:远程分支名 如果是一个人，遇到冲突，不想处理，可以强制推送\n1 git push -f origin main 可执行脚本定时提交\n1 2 3 4 5 #!/bin/bash cd /path/to/your/repo # 切换到项目目录‌ git add . # 添加所有修改到暂存区‌ git commit -m \u0026#34;Auto commit: $(date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; # 自动生成带时间的提交说明‌ git push origin main # 推送代码到远程仓库‌ 输入 github 账户名以及密码，不是 git 的用户名和密码\n","date":"2025-03-10T03:59:47+08:00","image":"https://zero3737.github.io/hugo/bg/47.jpg","permalink":"https://zero3737.github.io/hugo/p/github-%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%E4%BB%A5%E5%8F%8A%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81/","title":"github 新建仓库以及推送代码"},{"content":"从 github 导入项目到码云 码云支持 github 导入项目\n自动同步 github 项目 仓库 -\u0026gt; 管理 -\u0026gt; 基本设置\n","date":"2025-03-10T02:27:12+08:00","image":"https://zero3737.github.io/hugo/bg/12.jpg","permalink":"https://zero3737.github.io/hugo/p/gitee-%E5%AF%BC%E5%85%A5-github-%E9%A1%B9%E7%9B%AE/","title":"gitee 导入 github 项目"},{"content":"ssh 配置 如果使用 SSH 方式推送代码，需要配置 SSH Key。\n把邮件地址换成自己的邮件地址，该命令意思是生成 SSH Key。\n1 ssh-keygen -t rsa -C \u0026#34;youremail@example.com\u0026#34; 运行命令一路回车，使用默认值即可。如果运行顺利，会在用户主目录生成 .ssh 目录，里面有 id_rsa （私钥）和 id_rsa.pub （公钥）两个文件。\n进入用户主目录：\n1 cd ~ 然后登录 github 账号找到 SSH Keys 选项，添加 SSH Key，Key 内容为 id_rsa.pub （公钥）内容。\nGitHub 允许你添加多个 Key。假定你有若干电脑，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。\n在 GitHub 上免费托管的 Git 仓库，任何人都可以看到（但只有你自己才能改）。\n验证 SSH 配置是否成功：\n1 ssh -T git@github.com watch、star 和 fork 的区别 watch:\n对于别人的项目，默认自己都处于 Not watching 的状态；当你选择 Watching，表示你以后会关注这个项目的所有动态。这个项目以后只要发生变动，如被别人提交了 push request、被别人发起了 issue 等等情况，你都会在自己的个人通知中心，收到一条通知消息。如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。\nstar:\n类似关注或者点赞，当你点击 star，表示你喜欢这个项目，和对这个项目的支持。\nfork:\n点击 fork，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件；如果后续原项目文件发生改变，你必须通过其他的方式去同步。\n添加协作者（push权限） 设置选项，找到协作者（Collaborators）选项，添加用户。\nGitHub Pages 预览 HTML 你的仓库 -\u0026gt; Settings -\u0026gt; Options -\u0026gt; GitHub Pages\nSource 中选择 master branch。\n找到 GitHub Pages 中的地址，如下图所示：\n在上面的地址基础上加上你的相对与仓库的文件路径。\nGitHub Pages 自定义域名\n仓库 -\u0026gt; Settings\n箭头处填写对应域名即可（允许该域名进行CNAME访问）。\n等待域名生效，一般为 10 分钟。\n补充：DNS 服务器中将记录类型配置成 CNAME（别名记录），记录值填写 GitHub Pages 分配的域名。\nGithub 发布二进制文件让其他人下载 仓库主页 -\u0026gt; release\n点击下图箭头所指按钮。\n根据下图提示输入相应内容即可。\n分布完成别人即可下载你的发布内容。\nGithub 搜索指令 命令 作用 stars:\u0026gt;=500 搜索 star 大于等于 500 的项目。 stars:\u0026gt;=500 language:java 搜索 star 大于等于 500 的项目且为 JAVA 语言的项目。 ","date":"2025-03-10T02:24:20+08:00","image":"https://zero3737.github.io/hugo/bg/20.jpg","permalink":"https://zero3737.github.io/hugo/p/github-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","title":"github 使用教程"},{"content":"放弃本地修改并强制拉取更新 1 2 git fetch --all git reset --hard origin/master git fetch 指令是下载远程仓库最新内容，不做合并。\ngit reset 指令把HEAD指向master最新版本。\ngit 忽略特殊文件 在 Git 工作区的根目录下创建一个特殊的 .gitignore 文件。忽略指定文件：\n1 2 test.md index.html 如果要忽略某一类文件，内容如下：\n1 2 *.class *.html git ssh 远程连接服务器 git bash 输入 ssh root@192.168.1.102 命令，接着输入密码即可连接远程服务器。\nroot 为用户名，@ 符号紧跟 IP 地址。\n退出连接：Ctrl + D 退出连接\ngit 服务器搭建 本地 git 服务器搭建方案\nGogs GitLab ","date":"2025-03-10T02:20:13+08:00","image":"https://zero3737.github.io/hugo/bg/13.jpg","permalink":"https://zero3737.github.io/hugo/p/git-%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8-2/","title":"git 入门使用 2"},{"content":"概念 所有的版本控制系统，其实只能跟踪文本文件的改动，比如 TXT 文件、网页、所有的程序代码等等。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从 100KB 改成了 120KB。Microsoft 的 Word 格式是二进制格式，因此，版本控制系统是没法跟踪 Word 文件的改动的。\n工作区：就是你在电脑里能看到的目录。\n版本库：工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。版本库里存了很多东西，其中最重要的就是称为 stage（或者叫 index）的暂存区。\n还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD。\n配置姓名和邮箱 1 2 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;email@example.com\u0026#34; --global 参数表示这台机器上所有的 Git 仓库都会使用这个配置。当然也可以对某个仓库指定不同的用户名和 Email 地址。\n本地仓库 命令 说明 git init 在当前目录下会自动生成 .git 隐藏文件夹，该隐藏文件夹就是 git 版本库。 git add \u0026lt;file\u0026gt; 将文件添加到暂存区（将目标文件加入跟踪列表）。 git add -A 将所有文件添加到存储区。 git add -f App.class 强制添加。被 git 忽略的文件也可以强制添加。 git commit –m \u0026quot;message\u0026quot; 将暂存区文件提交到版本库。-m 参数为提交说明。 git status 显示工作目录和暂存区的状态。 git log --pretty=oneline 显示提交日志。--pretty=oneline 只显示 commit id 和描述。 git reflog 查看命令历史。 git diff \u0026lt;file\u0026gt; 比较当前文件和暂存区文件差异。 git diff HEAD [\u0026lt;path\u0026gt;...] 比较工作区与最新本地版本库。 git reset --hard HEAD^ 将当前 HEAD 复位到指定状态。HEAD 表示当前版本，HEAD^ 表示上一个版本，HEAD^^ 表示上上一个版本，HEAD~100 表示前 100 个版本。Git 的版本回退速度非常快，因为 Git 在内部有个指向当前版本的 HEAD 指针。当你回退版本的时候，Git 仅仅是改变 HEAD 指向。 git reset HEAD \u0026lt;file\u0026gt; 把暂存区的修改撤销掉，重新放回工作区。 git checkout --file 文件在工作区的修改全部撤销。文件没有被放到暂存区，撤销修改就回到和版本库一模一样的状态；文件已经添加到暂存区后，撤销修改就回到添加到暂存区后的状态。 git rm file 删除文件，同时还会将这个删除操作记录放到缓存区。 分支管理 命令 说明 git checkout master 切换分支。 git branch 查看当前有哪些分支。当前分支前面有个星号。 git branch dev 创建分支 dev。 git branch -d dev 删除 dev 分支。 git branch -D dev 强制删除 dev 分支。 git branch dev origin/dev 创建远程 origin 的 dev 分支到本地。默认克隆只有master分支。 git checkout -b dev 创建并切换到 dev 分支。 git merge dev 将当前分支合并到 dev 分支。 git merge --no-ff -m \u0026quot;merge with no-ff\u0026quot; dev 将当前分支合并到 dev 分支。--no-ff 参数，表示禁用快速模式。普通模式：当前分支合并时会提交到版本库，不是简单的变更指针指向。快速模式：把当前分支指向指定分支。 git log –graph 查看分支合并图。 分支策略\nmaster 分支称为主分支，HEAD 表示指向当前分支。\nmaster 分支应该是非常稳定的，dev 分支是不稳定的。1.0 版本发布时，再把 dev 分支合并到 master 上，在 master 分支发布 1.0 版本。每个人都在 dev 分支上干活，每个人都有自己的分支，时不时地往 dev 分支上合并。\n在 master 分支修复 bug，必须新建 bug 分支，修复完切换到 master 分支合并 bug 分支。\n在 dev 分支上开发新功能，新建 Feature 分支，新功能开发完毕切换到 dev 分支合并，如果不想合并必须强制删除。\n总结：\nmaster 分支是主分支，因此要时刻与远程同步。 dev 分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步。 bug 分支只用于在本地修复 bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个 bug。 feature 分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。 status 命令 说明 git stash 会把所有未提交的修改（包括暂存的和非暂存的）都保存起来。便于切换其他分支，修改其它分支的代码。 git stash list 列出通过 stash 储藏的修改。 git stash apply stash@{0} 恢复 stash@{0}。 git stash drop stash@{0} 删除 stash@{0}。 git stash pop 恢复的同时把stash内容删除。 标签管理 命令 说明 git tag \u0026lt;name\u0026gt; 给最近的 commit 打上标签。tag 就是一个让人容易记住的有意义的名字，它跟某个 commit 绑在一起。 git tag v0.9 f52c633 给指定 commit id 打上标签。 git tag 显示所有标签。 远程仓库 命令 说明 git remote add [shortname] [url] 添加远程仓库关联。shortname 只能对应一个 url。注意：推送代码前必须先关联远程仓库。 git remote 不带参数，列出已经存在的远程连接。 git remote –v 列出远程连接，并显示对应 url。 git remote remove \u0026lt;name\u0026gt; 删除远程仓库。 git push \u0026lt;远程主机名\u0026gt; \u0026lt;本地分支名\u0026gt;:\u0026lt;远程分支名\u0026gt; 将本地分支的更新，推送到远程主机。 git push origin master 将本地的 master 分支推送到 origin 主机的 master 分支。如果 master 不存在，则会被新建。 git push -u origin master -u 选项指定一个默认主机，这样后面就可以不加任何参数使用 git push。 git push origin :master 删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。 git push \u0026ndash;all origin 推送所有分支。 git push -f origin dev:master 强制推送。 git clone \u0026lt;版本库的网址\u0026gt; 本地主机生成一个目录，与远程主机的版本库同名。 git clone \u0026lt;版本库的网址\u0026gt; \u0026lt;本地目录名\u0026gt; 如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。 git pull \u0026lt;远程主机名\u0026gt; \u0026lt;远程分支名\u0026gt;:\u0026lt;本地分支名\u0026gt; 拉取远程主机某个分支的更新，再与本地的指定分支合并。 git fetch \u0026lt;远程主机名\u0026gt; \u0026lt;远程分支名\u0026gt;:\u0026lt;本地分支名\u0026gt; git fetch 和 git pull 类似，但不会自动合并当前分支。 git branch --set-upstream debug origin/debug 将本地 bug 分支与远程的 bug 分支关联。解决拉取时 git 提示 no tracking information 的问题。 克隆和拉取\nclone 是本地没有 repository 时，将远程 repository 整个下载过来\npull 是本地有 repository 时，将远程 repository 里新的 commit 数据(如有的话)下载过来，并且与本地代码 merge。\n","date":"2025-03-10T02:09:10+08:00","image":"https://zero3737.github.io/hugo/bg/10.jpg","permalink":"https://zero3737.github.io/hugo/p/git-%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/","title":"git 入门使用"},{"content":"前言 outlook 本土化非常好，可以同步 qq、163、gamil 以及微软邮箱\nqq 邮箱 添加账户-输入邮箱账号\n输入邮箱服务器密码，不是 qq 账号密码\n获取 qq 邮箱服务器密码，设置-账号，划到底部\n找到管理服务\n生成授权码，即可获得 qq 邮箱服务器密码\n填入 Outlook 即可登录成功\n163 邮箱 和 qq 邮箱同理，先获取邮箱服务器密码，设置-\u0026ldquo;POP3/SMTP/IMAP\u0026rdquo;-开启，即可获取授权码\n然后填入 163 邮箱账号，以及授权码，即可同步邮箱\n微软和 gmail 邮箱 微软邮箱和 gmail 支持直接输入账户密码直接同步，不需要获取邮箱服务器密码\n微软以及谷歌官网登陆，然后默认下一步即可同步邮箱\n","date":"2025-03-09T23:32:19+08:00","image":"https://zero3737.github.io/hugo/bg/19.jpg","permalink":"https://zero3737.github.io/hugo/p/outlook-%E8%81%9A%E5%90%88%E9%82%AE%E7%AE%B1%E5%AE%9E%E7%8E%B0%E9%82%AE%E7%AE%B1%E7%AE%A1%E7%90%86/","title":"outlook 聚合邮箱，实现邮箱管理"},{"content":"前言 hugo stack 默认的文章时间格式是英文的，本土化不是很好\n修改时间格式 配置文件 hugo.yaml 搜索 dateFormat，注释原本的时间格式\n添加代码\n1 2 3 4 5 dateFormat: # published: Jan 02, 2006 # lastUpdated: Jan 02, 2006 15:04 MST published: 2006-01-02 lastUpdated: 2006-01-02 15:04 MST 这样就修改成功了\n配置「最后修改于」 配置文件末尾添加代码\n1 2 frontmatter: lastmod: [\u0026#34;:fileModTime\u0026#34;, \u0026#34;lastmod\u0026#34;] 效果图\n","date":"2025-03-09T22:49:27+08:00","image":"https://zero3737.github.io/hugo/bg/27.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/","title":"hugo 修改时间格式"},{"content":"前言 open webui 进入不了主界面，长时间白屏\n这是因为前端页面长时间请求外国 api 接口造成的\n解决方法 关闭 open api 即可解决，这样前端就不会访问外国的 api 接口。外国软件，本地化不是很好。\n","date":"2025-03-09T22:22:02+08:00","image":"https://zero3737.github.io/hugo/bg/02.jpg","permalink":"https://zero3737.github.io/hugo/p/open-webui-%E9%95%BF%E6%97%B6%E9%97%B4%E7%99%BD%E5%B1%8F/","title":"open webui 长时间白屏"},{"content":"open webui 导入模型 api open webui 支持 3 种方式导入模型，分别是：OpenAI API、Ollama API 和直接连接。\n主流方式是 OpenAI API，许多第三方 api 都提供 OpenAI API 方式接入，比如腾讯、字节和百度。\nOllama API 是模型本地部署方案。所以 open webui 支持对接第三方 api 以及 Ollama 本地模型。\none api 只能通过“直接连接”方式对接 open webui\n点击加号即可对接 one api\n还可以通过函数方式创建模型，用来支持 deepseek 思维链功能。\n","date":"2025-03-09T21:56:49+08:00","image":"https://zero3737.github.io/hugo/bg/49.jpg","permalink":"https://zero3737.github.io/hugo/p/open-webui-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","title":"open webui 使用教程"},{"content":"前言 主流大模型平台的 API：\nSiliconFlow (硅基流动) 百度云 千帆 字节跳动 火山方舟 阿里云 百炼 腾讯 知识引擎 详细地址 火山 创建 api key：地址 创建接入点\n没有实名认证，必须实名认证\none api 接入配置\noben webui 通过“外部链接”方式对接 one api，one api 统一管理所有 api 接口。\n这里 v1 为固定写法，不要钻牛角尖。秘钥填 one api 的。\n填这个秘钥即可。\n腾讯 创建 api key：地址 ，必须要实名认证。\n查看文档即可，只有 r1 和 v3。\n百度 申请地址：地址1 申请 api key 即可\n参数填 deepseek-r1 即可\n这里可查看哪些模型可以使用\n","date":"2025-03-09T21:54:56+08:00","image":"https://zero3737.github.io/hugo/bg/56.jpg","permalink":"https://zero3737.github.io/hugo/p/open-webui-%E5%AF%B9%E6%8E%A5-deepseek/","title":"open webui 对接 deepseek"},{"content":"火山 api 申请 路径如下\n申请 api\n可以查看剩余 token\n火山联网 以火山为例：地址 默认即可，点击创建\n需要手动开通联网功能，有免费额度。\napi 调用\n选择“openai-sdk”\n联网功能的 api 和默认的 api 不一样，有区别。\n模型 id 也跟默认的不一样。\napi key 没有变化，按照下图配置即可。\n记得在这里启用，并修改名字。\n主页选择新的模型 api，即可体验联网功能的 deepseek\n腾讯 控制台 跟着文档走即可：文档地址 阿里 地址1 创建 api key\n","date":"2025-03-09T21:52:37+08:00","image":"https://zero3737.github.io/hugo/bg/37.jpg","permalink":"https://zero3737.github.io/hugo/p/open-webui-deepseek-api-%E8%81%94%E7%BD%91/","title":"open webui deepseek api 联网"},{"content":"思维链 deepseek 支持思维链代码：地址1 填入本地地址即可\n管理员面板\n注意链接是固定格式\n点击启用，可以重命名。\n该方式是导入 deepseek 模型，所以要重新选择刚刚创建的模型，one api 有所区别。如果之前导入过其他 api 模型，需要重新选择，这种方式是通过函数导入模型。\n","date":"2025-03-09T21:48:09+08:00","image":"https://zero3737.github.io/hugo/bg/09.jpg","permalink":"https://zero3737.github.io/hugo/p/open-webui-deepseek-%E6%94%AF%E6%8C%81%E6%80%9D%E7%BB%B4%E9%93%BE/","title":"open webui deepseek 支持思维链"},{"content":"前言 本文将分享一个全面且有创意的自我介绍框架，既能涵盖基础信息，又能突出个性和独特性。\n介绍自己 20 个角度\n个人简介 专业技能 工作经历 成就与荣誉 兴趣爱好 联系方式 性格特点 教育背景 语言能力 社会实践 社团活动 志愿经历 培训经历 个人作品 证书资质 行业见解 职业规划 个人价值观 技术栈 沟通风格 除了介绍自己，还能介绍博客的主题，博客初衷等待。\n“关于”页面案例 hugo “关于”页面模板\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ## 👤 我是谁？ - 🎮 游戏老餮：原神开服玩家/王者荣耀泉水指挥官/Steam喜加一专业户 - 💻 专业级赛博搬砖工，致富宣言：\u0026#34;只要副本刷得够，排骨顿顿能加肉\u0026#34;（懂的都懂） - 🖼️ 壁纸收藏家：小红车创意工坊常驻嘉宾，桌面壁纸半小时一换星人 - 🔄 人形重启键：\u0026#34;遇到问题先重启\u0026#34;是刻进DNA的祖传秘方（成功率51%） - ⚠️ 免责声明：会写代码≠会修电脑！ ## 🌸 我的快乐老家 - 🌸 美少女游戏非专业测评员（XP系统公开版） - 🕹️ 游戏日常：原神锄大地/王者0-10-0的快乐/Steam喜加一重症患者 - 🔧 数码日常：图吧垃圾佬预备役 ## 📒 关于这个博客 - 🪟 Windows驯兽师笔记 - 🐧 Ubuntu生存指南 - 🕳️ 踩坑记录（同一个坑绝不掉两次...大概） - 🎬 剪辑民工进化论 - 📈 Excel野路子研究院 - 💾 赛博口粮储备站（全网失效链接墓志铭合集） ","date":"2025-03-09T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/03.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-%E5%85%B3%E4%BA%8E%E9%A1%B5%E9%9D%A2%E6%A8%A1%E6%9D%BF/","title":"hugo “关于”页面模板"},{"content":"前言 通过 hugo server 命令可以启动为服务端，默认端口为 1313。但如果直接通过 Nginx 的 proxy_pass 反代为公网服务会遇到一些问题，应该加上一些参数启动。\n比如搜索页面加载图片失败，wss 一直访问失败\n点击链接，域名会默认加端口号，导致访问失败 404\n解决方案 appendPort 参数，这里需要设置为 false，这样你的 baseURL 就不会变成 \u0026lt;域名\u0026gt;:1313。如果不设置为 false，你在使用搜索等功能的时候，浏览器还是会向 1313 端口发送请求。 baseURL 参数，不然搜索页面中的笔记自动跳转 localhost。 liveReloadPort 参数，这个是 Hugo 用来实时更新网页内容的 WebSocket 端口。除了要设置 Nginx 支持 WebSocket，这里还要手动指定下 wss 访问的端口为与 https 相同的 443。 完整命令\n1 hugo server --port=1313 --bind=192.168.15.210 --baseURL=https://www.carlos.lh/ --liveReloadPort 443 --appendPort=false ","date":"2025-03-09T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/37.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%9F%9F%E5%90%8D%E9%BB%98%E8%AE%A4%E5%8A%A0%E7%AB%AF%E5%8F%A3%E5%8F%B7/","title":"hugo nginx 反向代理域名默认加端口号"},{"content":"前言 本文主题是实现 hugo stack 主题，点击图片放大的功能。\n原来图片很小，不方便自己查看，比如这里，根本看不清楚日志。\n实操 修改 config.toml 或者 hugo.yaml\n添加配置，编辑 /root/hugo 主目录下的 hugo.yaml，我的 Ubuntu 环境\n1 2 params: fancybox: true 路径为/layouts/_default/_markup/render-image.html 添加内容为\n1 2 3 4 5 6 7 {{if .Page.Site.Params.fancybox }} \u0026lt;div class=\u0026#34;post-img-view\u0026#34;\u0026gt; \u0026lt;a data-fancybox=\u0026#34;gallery\u0026#34; href=\u0026#34;{{ $Permalink }}\u0026#34;\u0026gt; \u0026lt;img loading=\u0026#39;lazy\u0026#39; src=\u0026#34;{{ $Permalink }}\u0026#34; alt=\u0026#34;{{ .Text }}\u0026#34; {{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }} /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 路径为 /root/hugo/themes/hugo-theme-stack/layouts/partials/footer，编辑 custom.html 内容为：\n1 2 3 4 5 {{if .Page.Site.Params.fancybox }} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} 重启 hugo 服务即可实现点击图片放大功能。\n","date":"2025-03-09T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/40.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-stack-%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7/","title":"hugo stack 图片点击放大"},{"content":"前言 本文主题是如何实现 hugo stack 主题添加 b 站图标（或者是称作徽标？）跳转个人主页配置\n就是添加这么一个小图标的功能，点击即可跳到 b 站的个人主页\n实操 下载对应图标：地址1 保存格式为 svg，然后将资源放到 /root/hugo/themes/hugo-theme-stack/assets/icons 目录下\n我的文件为 bilibili.svg\n添加对应配置文件即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 menu: main: [] social: - identifier: github name: GitHub url: https://github.com/zero3737 weight: 1 # 权重值，决定图标在导航栏中的位置，越小越靠前 params: icon: brand-github - identifier: bilibili name: Bilibili url: \u0026#34;https://space.bilibili.com/4069668\u0026#34; # 替换为你的 B 站个人主页链接 weight: 2 # 权重值，决定图标在导航栏中的位置，越小越靠前 params: icon: bilibili # 图标的名称，应与你放置在 `assets/icons/` 目录下的文件名（不带扩展名）一致 重启服务器，即可添加完成。\n","date":"2025-03-09T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/38.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-stack-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0-b-%E7%AB%99%E5%9B%BE%E6%A0%87%E8%B7%B3%E8%BD%AC%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E9%85%8D%E7%BD%AE/","title":"hugo stack 主题添加 b 站图标跳转个人主页配置"},{"content":"查看进程 ps 命令：命令用于报告当前系统的进程状态。常用的组合有 ps aux\na：显示所有用户的进程 u：以用户友好的格式显示 x：显示没有控制终端的进程 1 ps aux | grep 进程名 第二列为 pid，关闭进程的时候会用到。\n关闭进程 kill 命令：kill 命令用于向进程发送信号，最常用的信号是 SIGTERM（终止）和 SIGKILL（强制终止）。\n1 2 kill 进程ID # 发送 SIGTERM 信号 kill -9 进程ID # 发送 SIGKILL 信号，强制终止 pkill 命令：pkill 命令可以根据进程名或其他属性直接终止进程，而无需先查找进程 ID。\n1 pkill 进程名 killall 命令：killall 命令可以根据进程名终止所有匹配的进程。\n1 killall 进程名 ","date":"2025-03-09T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/10.jpg","permalink":"https://zero3737.github.io/hugo/p/linux-%E4%B8%AD%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E4%BB%A5%E5%8F%8A%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%96%B9%E6%B3%95/","title":"Linux 中查看进程以及杀死进程的方法"},{"content":"前言 在局域网中复制代码，提示报错信息\n1 2 Uncaught TypeError: Cannot read properties of undefined (reading \u0026#39;writeText\u0026#39;) at HTMLButtonElement.\u0026lt;anonymous\u0026gt; (main.0761bcd8210a6cd3dc991b9464d19e763381e47bd94d7f30c1a0df2d68d6eb33.js:486:31) 而在本地却能正常复制粘贴，比如 localhost 可以正常复制粘贴。这可能是因为在局域网环境下，浏览器对剪贴板的访问权限被限制，导致navigator.clipboard对象不可用，从而引发该错误。\n解决方案 使用HTTPS：浏览器在非安全上下文（如HTTP）中可能会限制对剪贴板的访问。因此，建议在局域网中使用HTTPS来启动Hugo服务器。可以通过生成自签名的TLS证书来实现HTTPS，虽然浏览器可能会提示不安全，但对于本地开发和测试来说已经足够。\nnginx 配置 https 即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 server { listen 80; server_name www.carlos.lh; # 强制HTTPS return 301 https://$host$request_uri; } server { listen 443 ssl; server_name www.carlos.lh; ssl_certificate /root/ssl/server.crt; ssl_certificate_key /root/ssl/server.key.unsecure; ssl_session_cache shared:SSL:10m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / { proxy_pass http://192.168.15.210:1313; # 将请求转发到本地的8080端口 proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-Port $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Host $host; proxy_set_header X-Forwarded-Port $server_port; proxy_set_header REMOTE-HOST $remote_addr; proxy_connect_timeout 60s; proxy_send_timeout 600s; proxy_read_timeout 600s; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; } # 其他配置... } 局域网配置 https 即可正常复制，非常完美\n","date":"2025-03-08T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/13.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-stack-%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%AD%E4%BB%A3%E7%A0%81%E5%9D%97%E4%B8%8D%E8%83%BD%E5%A4%8D%E5%88%B6/","title":"hugo stack 局域网中代码块不能复制"},{"content":"前言 我是局域网访问，使用搜索功能的时候，可以搜索出笔记，但是图片加载不出来，点击链接，直接 404，直接访问到 localhost，正常是访问 ip 地址的。\n这是因为启动命令没有设置 baseURL，添加这个参数即可正常访问。\n实操 命令添加参数 baseURL\n1 hugo server --port=1313 --bind=0.0.0.0 --baseURL=\u0026#34;http://192.168.15.210/\u0026#34; 加了参数之后，图片能正常加载，也能正常跳转指定的 ip 地址。\n","date":"2025-03-08T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/46.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-stack-%E6%90%9C%E7%B4%A2%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E5%88%B0-localhost-%E9%97%AE%E9%A2%98/","title":"hugo stack 搜索页面跳转到 localhost 问题"},{"content":"启动文件夹 按 Win + R 键打开“运行”对话框。\n输入 shell:startup 并按 Enter 键，这将打开“启动”文件夹。这个文件夹中的所有程序都会在系统启动时自动运行。\n将脚本放入“启动”文件夹‌。\n隐藏命令窗口 创建文件，内容如下：\n1 2 Set WshShell = CreateObject(\u0026#34;WScript.Shell\u0026#34;) WshShell.Run chr(34) \u0026amp;\u0026#34;C:\\path\\to\\your\\batchfile.bat\u0026#34;\u0026amp; chr(34), 0 替换\u0026quot;C:\\path\\to\\your\\batchfile.bat\u0026quot;为你的批处理文件的实际路径。\n保存文件，扩展名为.vbs，例如runBatchSilent.vbs。\n将 vbs 文件放到“启动”文件夹，bat 文件放到自己喜欢的目录即可，vbs 中的路径一定要指向 bat 文件，原理是通过 vbs 隐藏命令窗口。\n","date":"2025-03-08T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/30.jpg","permalink":"https://zero3737.github.io/hugo/p/windows-%E5%BC%80%E6%9C%BA%E6%89%A7%E8%A1%8Cbat%E8%84%9A%E6%9C%AC%E5%90%AB%E9%9A%90%E8%97%8F%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3/","title":"windows 开机执行bat脚本，含隐藏命令窗口"},{"content":"前言 如何关闭 edge 自动填充表单功能\n在输入框中，输入信息，会自动弹出经常输入的信息，而且删不掉，没有任何实际作用。\n实操 地址栏输入 edge://wallet/settings\n关闭“保存并填充基本信息”即可\n","date":"2025-03-08T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/39.jpg","permalink":"https://zero3737.github.io/hugo/p/%E5%85%B3%E9%97%AD-edge-%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E8%A1%A8%E5%8D%95%E5%8A%9F%E8%83%BD/","title":"关闭 edge 自动填充表单功能"},{"content":"前言 图片懒加载是一种网页优化技术，用于延迟加载非关键的图片资源，直到用户滚动到它们的位置。这样可以加快页面初始加载速度，节省带宽，提升用户体验。\n工作原理 延迟加载：当网页加载时，只加载可视区域内的图片，其他图片暂不加载。 滚动检测：用户滚动页面时，检测图片是否进入可视区域。 按需加载：一旦图片进入可视区域，立即加载该图片。 优点 加快初始加载：减少首次加载的资源量，页面更快呈现。 节省带宽：用户无需加载未查看的图片，减少数据流量。 优化体验：页面响应更快，浏览更流畅。 应用场景 长网页：包含大量图片的长页面，如电商网站商品列表。 图片库：图片较多的页面，如社交媒体相册。 移动设备：带宽有限时，节省流量尤为重要。 实现方式 JavaScript 监听滚动事件：通过 onscroll 事件检测图片位置。 使用 Intersection Observer API：现代浏览器推荐，高效检测元素可见性。 第三方库：如 lazyload，简化实现过程。 懒加载技术在现代网页开发中广泛应用，有效提升性能和用户体验。\n","date":"2025-03-08T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/58.jpg","permalink":"https://zero3737.github.io/hugo/p/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/","title":"图片懒加载"},{"content":"前言 如何删除以及恢复 github 仓库，图文教程。\n删除 github 仓库 仓库主页找到 settings\n找到 general，往下滑\n点击如图按钮即可删除 github 仓库。\n恢复 github 仓库 点击头像\n找到\u0026quot;Deleted repositories\u0026quot;\n即可看到最近的仓库，如果时间太久，会永远删除。如果没有显示，就是删除时间太快，服务器还没有刷新，等一个小时就好。\n","date":"2025-03-07T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/20.jpg","permalink":"https://zero3737.github.io/hugo/p/github-%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93/","title":"github 删除仓库"},{"content":"前言 本文是说明 hugo 基础配置，比如配置网站图标以及汉化主题等等。\nhugo 网站图片 hugo 配置文件，搜索 favicon 即可，填入图标地址即可。\nstack 网站主页头像 要修改 hugo 主页头像，不同主题修改方式不一样，以 stack 主题为例，将头像放到对应目录即可。\n我的是 /root/hugo/themes/hugo-theme-stack/assets/img 目录下。\n配置推广链接 我使用的 stack 主题，不同主题修改方式不同。\n搜索 github，修改成自己 github 主页地址。\n侧边栏汉化 侧边栏部分英文，需要修改页面数据。\n找到对应目录，编辑 md 文件即可。\n以 archives 为例，修改成“归档”即可。\nLanguage 如果只想保持一种语言，则 config 中的 language 只保留一种语言，如中文：\n1 2 3 4 languages: zh-cn: languageName: 中文 weight: 1 友链、归档多列显示 /root/hugo/themes/hugo-theme-stack/assets/scss 自定义 custom.scss 样式\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @media (min-width: 1024px) { .article-list--compact { display: grid; // 目前是两列，如需三列，则后面再加一个1fr，以此类推 grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; margin-right: 8px; border-radius: 16px; } } } 删除归档页面中的分类 定位 /root/hugo/themes/hugo-theme-stack/layouts/_default 目录，编辑 archives.html 文件即可\n注释图中 html 片段即可\n归档页面添加标签 在 layouts/_default/archives.html 里的 \u0026lt;/header\u0026gt; 后面加上如下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 {{- $taxonomy := $.Site.GetPage \u0026#34;taxonomyTerm\u0026#34; \u0026#34;tags\u0026#34; -}} {{- $terms := $taxonomy.Pages -}} {{ if $terms }} \u0026lt;section class=\u0026#34;widget tagCloud\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;{{ $taxonomy.Title }}\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;tagCloud-tags\u0026#34;\u0026gt; {{ if ne (len $.Site.Taxonomies.tags) 0 }} {{ range $name, $taxonomy := $.Site.Taxonomies.tags }} {{ $tagCount := len $taxonomy.Pages }} \u0026lt;a href=\u0026#34;{{ \u0026#34;/tags/\u0026#34; | relURL }}{{ $name | urlize }}\u0026#34; class=\u0026#34;tagCloud-tags\u0026#34;\u0026gt; {{ $name }}\u0026lt;span class=\u0026#34;tagCloud-count\u0026#34;\u0026gt;{{ $tagCount }}\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;section\u0026gt; {{ end }} /root/hugo/themes/hugo-theme-stack/assets/scss 自定义 custom.scss 样式\n1 2 3 4 5 .tagCloud { .tagCloud-count { color: var(--body-text-color); } } 引入动态背景 定位 /root/hugo/themes/hugo-theme-stack/layouts/partials/footer 编辑 custom.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;div id=\u0026#34;particles-js\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.bootcdn.net/ajax/libs/particles.js/2.0.0/particles.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; particlesJS.load(\u0026#39;particles-js\u0026#39;, \u0026#34;https://letere-gzj.github.io/hugo-stack/background/particles/particlesjs-config.json\u0026#34;, function() { console.log(\u0026#39;particles.js loaded - callback\u0026#39;); }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; #particles-js { position: fixed; top: 0; left: 0; width: 100%; z-index: -1; } \u0026lt;/style\u0026gt; 图片懒加载 注：Stack 主题默认有懒加载，不需要自行添加\n实现：/layouts/_default/_markup 中新建 render-image.html 然后丢入代码：\n1 2 3 \u0026lt;p class=\u0026#34;md_image\u0026#34;\u0026gt; \u0026lt;img loading=\u0026#39;lazy\u0026#39; src=\u0026#34;{{ $Permalink }}\u0026#34; alt=\u0026#34;{{ .Text }}\u0026#34; {{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }} /\u0026gt; \u0026lt;/p\u0026gt; ","date":"2025-03-07T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/09.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-stack-%E4%B8%BB%E9%A2%98%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/","title":"hugo stack 主题基础配置"},{"content":"前言 本文主题是如何批量重命名文件，从 00 开始递增，强制保留 2 位数\n使用 PowerRename 批量重命名 右键点击选定的文件，选择“PowerRename”选项，打开 PowerRename 窗口。\n启用正则表达式，输入 .* 匹配任意文件名\n在“替换为”字段中输入新的命名格式。使用 ${padding=2;increment=1;start=0} 来实现从 00 开始的两位数递增编号。\n最后点击应用即可。\n","date":"2025-03-07T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/02.jpg","permalink":"https://zero3737.github.io/hugo/p/powertoys-%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/","title":"PowerToys 批量重命名"},{"content":"限定符“？” 当 “?” 紧跟在一个字符或子表达式之后时，它表示该字符或子表达式在匹配中可以出现0次或1次。换句话说，它是可选的。\n例如，colou?r 可以匹配 “color” 或 “colour”。\n限定符“*” 在正则表达式中，“* ”具有特殊的匹配规则，它表示前面的字符或子表达式可以出现任意次数，包括零次。例如，正则表达式a*可以匹配空字符串、一个“a”、两个连续的“a”、三个连续的“a”等等，即匹配零个或多个连续的字母“a”‌。\n限定符“+” 在正则表达式中，“+”是一个量词，用于指定前面的字符或子表达式必须至少出现一次，并且可以重复出现多次。例如，正则表达式a+可以匹配“a”、“aa”、“aaa”等，但不能匹配空字符串。这是因为“+”要求前面的字符或子表达式至少出现一次。\n限定符“{}” 在正则表达式中，“{}”内部可以包含一个数字或两个由逗号分隔的数字，具体含义如下：\n{n}‌：表示前面的字符或子表达式恰好出现n次。例如，a{3}将匹配三个连续的“a”字符‌。 {n,}‌：表示前面的字符或子表达式至少出现n次，可以更多。例如，a{1,}表示至少有一个“a”，可以是一个或多个连续的“a”字符‌。 {n,m}‌：表示前面的字符或子表达式至少出现n次，但不超过m次。例如，a{1,3}将匹配一个到三个连续的“a”字符‌。 限定符“()” 在正则表达式中，括号“（）”可以将一些字符组合在一起，形成一个分组。这个分组通常用于确定优先级、重复次数或应用特殊的匹配规则。例如，(ab)可以将字符a和b组合在一起作为一个整体进行匹配，而(abc|bcd|cde)则表示匹配abc、bcd或cde这三者之一‌。\n运算符“|” 在正则表达式中，“|”被称为选择符，它允许在两个或多个可能的匹配中进行选择。例如，正则表达式abc|def将匹配字符串“abc”或“def”。需要注意的是，选择符“|”会优先于其他运算符进行匹配，除非被括号等分组符号所包围。\n字符类“[]” ‌正则表达式中的“[]”用于定义一个字符集合，匹配方括号内的任意一个字符‌。\n在正则表达式中，[]被称为字符类，它允许匹配方括号内指定的任意一个字符。例如，[abc]表示匹配字符a、b或c中的任意一个；[a-z]表示匹配任意一个小写字母；[a-zA-Z0-9_]表示匹配任意一个字母、数字或下划线。此外，字符类还支持使用“^”符号进行取反操作，例如[^abc]表示匹配不是a、b或c的任意一个字符‌。\n元字符“\\d” ‌正则表达式中的\\d代表匹配一个数字字符‌。等价于[0-9]，即它可以匹配任何一个在0到9之间的单个数字‌。\n元字符“\\D” ‌正则表达式中的\\D代表匹配任何非数字字符‌。这里的“非数字字符”是指除了0到9的数字之外的所有字符，包括字母、空格、标点符号、特殊字符等。\n具体来说，\\D是\\d的反义，\\d匹配的是[0-9]，即任何一个数字字符，而\\D则匹配的是[0-9]，即除了0到9之外的任何一个字符。\n元字符“\\w” 正则表达式中的\\w代表匹配任何字母（包括大写和小写字母）、数字字符以及下划线_‌。\n具体来说，\\w相当于[a-zA-Z0-9_]，即它可以匹配以下字符：\n所有小写字母（a-z） 所有大写字母（A-Z） 所有数字（0-9） 下划线（_） 元字符“\\W” ‌正则表达式中的\\W代表匹配任何非单词字符‌。这里的“非单词字符”是指除了字母（包括大写和小写）、数字以及下划线之外的所有字符。\n具体来说，\\W是\\w的反义，\\w匹配的是[a-zA-Z0-9_]，即字母、数字和下划线，而\\W则匹配的是[a-zA-Z0-9_]，即除了字母、数字和下划线之外的所有字符，包括空格、标点符号、特殊字符等。\n元字符“\\s” 正则表达式中的\\s表示匹配任何空白字符‌。这些空白字符包括空格、制表符（tab）、换行符等‌。\n元字符“\\b” 在正则表达式中，\\b 是一个表示单词边界的元字符。它用来匹配一个位置，这个位置前后分别是一个单词字符和一个非单词字符（或字符串的开始或结束）。\n以下是一些例子来说明它的使用：\n正则表达式 \\bword\\b 会匹配独立的单词“word”。比如，在字符串“word boundary”中会匹配“word”，但在字符串“wordplay”中不会匹配。 正则表达式 \\b123\\b 会匹配独立的数字“123”。比如，在字符串“123 is a number”中会匹配“123”，但在字符串“1234”中不会匹配。 元字符“.” 在正则表达式中，. 是一个非常重要的元字符，‌它代表匹配除换行符 \\n 之外的任何单个字符‌。这意味着，. 可以匹配字母、数字、标点符号、空格等几乎所有字符（但不包括换行符，除非在特定的模式或标志下，如 JavaScript 中的 s 标志可以使其匹配换行符）。\n‌匹配任意字符‌：正则表达式 a.b 可以匹配 acb、a1b、a b（注意这里的空格也是字符）等，但不能匹配 ab（因为中间没有字符）或 a\\nb。\n元字符“^” 在正则表达式中，符号“^”有两种主要用途：\n表示行的开始：当它出现在模式的开头时，表示字符串必须以该模式开头。例如，模式^abc将匹配以“abc”开头的任何字符串。 取反：当它在方括号内的字符类的开头时，表示字符类中的字符集的补集。例如，模式\\[^abc\\]将匹配任何不包含字符“a”、“b”或“c”的单个字符。 元字符“$” 在正则表达式中，符号“$”主要用于表示行的结束。当它出现在模式的末尾时，表示字符串必须以该模式结束。\n例如：正则表达式 abc$ 可以匹配以“abc”结尾的任何字符串，例如“123abc”，但不能匹配“abc123”。\n“贪婪”和“懒惰”匹配 正则表达式中的“贪婪”和“懒惰”是描述量词行为的术语。量词用来指定要匹配的字符数，而贪婪和懒惰决定了这些量词如何进行匹配。\n贪婪量词：默认情况下，正则表达式中的量词是贪婪的，即它们会尽可能多地匹配字符。\n例如，模式 .* 是一个贪婪量词，会匹配尽可能多的字符。例如，对于字符串“abc123”，模式 a.*3 会匹配“abc123”。\n懒惰量词：懒惰量词通过在贪婪量词后面加上一个问号?来实现，它们会匹配尽可能少的字符。\n例如，模式 .? 是一个懒惰量词，会匹配尽可能少的字符。例如，对于字符串“abc123”，模式 a.?3 会匹配“abc3”。\n","date":"2025-03-07T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/08.jpg","permalink":"https://zero3737.github.io/hugo/p/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","title":"正则表达式"},{"content":"Homepage 主要配置文件功能介绍 1、settings.yaml\nhomepage的设置文件，用来设置：语言、布局、标题、favicon图标、背景图片等。\n2、service.yaml\nhomepage的服务文件，用来设置：Docker或其他服务导航入口等。\n3、widgets.yaml\nhomepage的小组件文件，用来设置：功能显示如：CPU、内存占用率、温度、上线时间等；搜索框、天气、日期和时间等。\n4、bookmarks.yaml\nhomepage的书签文件，用来设置：网站收藏书签、书签图标、url等。\nsettings.yaml language：语言设置 background：背景图片设置 1 2 3 4 5 6 7 8 9 10 providers: openweathermap: openweathermapapikey weatherapi: weatherapiapikey language: zh-CN background: image: https://images.unsplash.com/photo-1502790671504-542ad42d5189?auto=format\u0026amp;fit=crop\u0026amp;w=2560\u0026amp;q=80 hideVersion: true services.yaml 配置模板：\n1 2 3 4 5 6 7 8 9 10 11 12 - 媒体影音: - EmbyServer: icon: emby.png href: http://x.x.x.x:8096/ # Emby IP:8096 description: Movies \u0026amp; TV Shows ping: 127.0.0.1 # Emby IP widget: type: emby url: http://x.x.x.x:8096 key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxx enableBlocks: true # optional, defaults to false enableNowPlaying: true # optional, defaults to true Group 组和 Service 服务之前要用 -，且上下级空格排列，下面参数要多几个空格对齐。\nhomepage内置自带图标集合。使用的是如下开源图标集：https://github.com/homarr-labs/dashboard-icons/blob/main/ICONS.md\n我们可以在icon参数中，直接调用。只要是以上图标集中存在的图标即可。\nhref 中 url 结尾有 / 比如 http://xxxx:1234/，与之后添加组件 widget 中的 url 不需要加 /，两者是不同的。\nHomepage支持的服务非常多，每个具体的widget组件参数设置均不相同，具体可以查看：https://gethomepage.dev/widgets/\nwidgets.yaml 此为 homepage 的功能组件，注意和 service 的 widgets 服务组件参数区分。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # 比如上线时间、CPU使用率、温度范围最低最高等扩展显示 - resources: cpu: true memory: true disk: / cputemp: false # disabled by default uptime: true # disabled by default expanded: true # show the expanded view # 搜索框设置，可选搜索引擎：如百度、谷歌等，_blank搜索结果开新页面显示 - search: provider: [google, baidu] target: _blank # 天气组件 - openmeteo: label: 中山小榄 # optional latitude: 22.671981 longitude: 113.243876 timezone: Asia/Shanghai # optional units: metric # or imperial cache: 5 # Time in minutes to cache API responses, to stay within limits bookmarks.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - Developer: - Github: - abbr: GH href: https://github.com/ - Social: - Reddit: - icon: reddit.png href: https://reddit.com/ description: The front page of the internet - Entertainment: - YouTube: - abbr: YT href: https://youtube.com/ 也可使用http/https网页图标，如：https://www.baidu.com/favicon.ico\n","date":"2025-03-06T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/54.jpg","permalink":"https://zero3737.github.io/hugo/p/homepage-%E9%85%8D%E7%BD%AE/","title":"homepage 配置"},{"content":"本地存储方案 一、static 文件夹集中管理\n在 Hugo 项目根目录创建 static/images 文件夹，将图片统一存放于此。引用时使用绝对路径：![描述](/images/图片名.jpg)。\n优势：Hugo 构建时自动复制到网站根目录，路径稳定，适合高频更新且需长期保留的图片‌。\n二、内容同级目录管理\n在 content 目录下，创建与 Markdown 文件同名的文件夹（如 post.md 对应 post 文件夹），将图片存放其中。引用时使用相对路径：![描述](./图片名.jpg)。\n优势：图片与笔记文件物理位置绑定，迁移或备份时不易丢失关联，适合单篇笔记专属图片‌。\n三、Assets 资源库管理\n在 assets/images 中存放全局图片（如头像、Logo），通过配置文件 config.toml 指定路径。示例配置：avatarURL = \u0026quot;images/avatar.png\u0026quot;。\n优势：统一管理全站公共图片资源，便于复用和维护‌4。\n符号链接 hugo static 目录可以使用符号链接，而 content/post 目录是不能使用符号链接，hugo 默认忽略 post 中的符号链接。\n","date":"2025-03-06T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/34.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86/","title":"hugo 笔记图片管理"},{"content":"前言 本文是在 ubuntu 环境中安装 hugo。\n安装 安装命令\n1 2 sudo apt update sudo apt -y install hugo 验证是否安装成功\n1 hugo version 安装成功会显示如下信息。\n启动与配置 创建站点目录\n1 hugo new site quickstart 将主题文件放到站点目录中的 themes 目录下\n启动 hugo 服务\n1 hugo server 绑定到 0.0.0.0 hugo server 默认绑定到 127.0.0.1（localhost），因此只能在本机访问。\n1 hugo server --bind=\u0026#34;0.0.0.0\u0026#34; 在启动 hugo server 时，使用 \u0026ndash;bind 参数将其绑定到 0.0.0.0，这样可以监听所有网络接口。\n这样，局域网内的其他设备可以通过你的服务器 IP 地址访问 Hugo 服务。例如，如果服务器的 IP 是 192.168.1.100，可以通过 http://192.168.1.100:1313 访问。\n指定端口号 如果需要指定端口号，可以使用 -p 参数：\n1 hugo server --bind=\u0026#34;0.0.0.0\u0026#34; -p 1234 设置 baseURL 如果页面资源加载失败或样式错乱，可能是因为 baseURL 默认指向 localhost。可以通过 \u0026ndash;baseURL 参数指定为服务器的 IP 地址：\n1 hugo server --bind=\u0026#34;0.0.0.0\u0026#34; --baseURL=\u0026#34;http://192.168.1.100/\u0026#34; 将 192.168.1.100 替换为你的实际服务器 IP。\n主题 把 hugo_blog/themes/hugo-theme-stack/exampleSite/config.yaml 文件拷贝到 hugo_blog 目录下。 把 hugo_blog/themes/hugo-theme-stack/exampleSite/content 目录下的文件拷贝到 hugo_blog 目录下。 hugo-theme-stack 主题有样例配置文件作为参考，直接复制粘贴即可。\n头部元数据 Hugo 的 ‌Front Matter‌（文件头部元数据）定义了内容的核心参数，控制页面生成、URL 结构和内容管理。\n参数 说明 slug 自定义文章 URL 末尾部分，优先级高于标题（title）‌ draft 标记是否为草稿（true/false），草稿默认不发布到生产环境‌ categories 类别 tags 标签 image 定义文章或页面的封面图 title‌ 定义页面标题 date 设置内容发布日期，控制文章在列表中的排序 description 提供页面摘要描述，用于 SEO 优化和社交媒体分享 weight 控制内容在列表或菜单中的排序权重 author 声明文章作者信息，支持多作者配置 categories 和 tags\n1 2 categories = [\u0026#34;技术\u0026#34;, \u0026#34;前端\u0026#34;] # 支持多层级 tags = [\u0026#34;Hugo\u0026#34;, \u0026#34;静态站点\u0026#34;] # 多个标签以数组形式定义‌:ml-citation{ref=\u0026#34;1\u0026#34; data=\u0026#34;citationList\u0026#34;} image 基础用法，需将图片存放在 static 目录下，通过相对路径引用‌。\n1 image = \u0026#34;/img/logo3.png\u0026#34; # 对应 static/img/logo3.png 支持 http 远程调佣\n1 image = \u0026#34;https://example.com/cover.jpg\u0026#34; 文章不同元数据模板 ‌TOML 格式‌编写元数据，用来兼容 hugo\n1 2 3 4 5 6 7 8 9 +++ date = \u0026#34;{{date:YYYY-MM-DD}}\u0026#34; title = \u0026#34;{{title}}\u0026#34; tags = [\u0026#34;Hugo\u0026#34;, \u0026#34;静态站点\u0026#34;] categories = [\u0026#34;技术\u0026#34;, \u0026#34;前端\u0026#34;] description = \u0026#34;hello world!\u0026#34; image = \u0026#34;https://api.timelessq.com/bing/random\u0026#34; author = \u0026#34;carlos\u0026#34; +++ YAML 格式‌编写元数据\n1 2 3 4 5 --- title: \u0026#34;示例文章\u0026#34; date: 2025-03-06 draft: false --- JSON 格式\n1 2 3 4 5 { \u0026#34;title\u0026#34;: \u0026#34;示例文章\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2025-03-06\u0026#34;, \u0026#34;draft\u0026#34;: false } ","date":"2025-03-06T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/49.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-%E5%85%A5%E9%97%A8%E7%AF%87/","title":"hugo 入门篇"},{"content":"前言 在 hugo 中，当文章时间设置为当天的话，将文章发布到国外服务器中并进行构建的话，该文章可能没有显示在文章列表里。\nHugo 时间默认为格林威治时间，因为中国的时间比格林威治时间早 8 个小时，格林威治时间没有到你配置的时间的时候，文章是不会出现在文章列表里的。\n解决方案 解决方法一： 是在命令后添加 \u0026ndash;buildFuture 或 -F 选项 ，来构建未来发布的文章，比如：\n1 2 hugo server --buildFuture hugo --buildFuture 解决方法二： 在站点配置文件 config.toml 中添加下面的配置：\n1 buildfuture = true 我的是 yaml 文件，文件末尾添加即可\n","date":"2025-03-06T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/15.jpg","permalink":"https://zero3737.github.io/hugo/p/hugo-%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4%E6%96%87%E7%AB%A0%E6%9C%AA%E6%98%BE%E7%A4%BA/","title":"hugo 时区问题导致文章未显示"},{"content":"文件与链接 配置如图\n内部链接类型选择“相对路径”，兼容markdown “使用wiki链接”关闭，兼容markdown 修改“附件默认存放路径”，不然图片默认存放根目录，很不美观 兼容 joplin joplin 导出 markdown 默认目录结构。\nobsidian 主流知识库目录结构要符合主流标准，不然很难管理。joplin 附件都是存放在自己的数据文件夹下，用户不用关心附件管理问题。而 obsidian 需要自己设计知识库目录结构，不然管理非常头疼。\n我的设计思路非常简单，根目录下穿件 00-assets 目录，用于存放所有附件即可。\n看起来非常清爽，为了兼容新的目录结构，需要使用符号链接。\n先将 _resources 目录重命名为 00-assets，然后运行命令\n1 mklink /D \u0026#34;C:\\Users\\carlos\\Desktop\\obsidian\\_resources\u0026#34; \u0026#34;C:\\Users\\carlos\\Desktop\\obsidian\\00-assets\u0026#34; 这样导出的 markdown 文件就能在 vscode 中正常显示图片，已经完美兼容 obsidian\n快捷键 快捷键 说明 ctrl+shift+v 无格式粘贴 ctrl+o Ctrl+O 可直接打开“打开文件”对话框，用于快速选择并加载本地文件‌。 ctrl+p 调出命令面板 右键快速插入表格\n元数据 在笔记第 1 行输入 --- 用于添加元数据。\n双链 反向链接，不用手动链接，当别的笔记提到当前文件名，就会自动提示。\n不过很鸡肋唉，谁会写笔记的时候复制粘贴别的笔记名啊。\n出链，和网页的跳转页面一样，就是跳转到需要链接的笔记。和反向链接一样，输入需要链接的笔记名，就会自动显示。\n白板 侧边栏创建白板\n简单可视化操作，就是实现思维导图。\n第三方插件 如果网络访问不了官方社区，可以访问第三方社区：地址1 首先关闭安全模式\n点击浏览即可安装第三方插件，访问的是 github\n模板 开启原生模板插件，点击左下角「设置」→「核心插件」→ 启用「模板」功能‌。\n在「模板」插件设置中指定模板文件夹（如 Templates）‌。\n编写模板内容，在 Templates 文件夹新建 hugo-template.md，内容如下\n1 2 3 4 5 6 7 8 9 10 +++ date = \u0026#34;{{date:YYYY-MM-DD}}\u0026#34; author = \u0026#34;carlos\u0026#34; title = \u0026#34;{{title}}\u0026#34; description = \u0026#34;hello worlld!\u0026#34; tags = [ \u0026#34;hello\u0026#34;, \u0026#34;world\u0026#34;, ] +++ 插入模板到新笔记\n新建笔记 → 点击左侧「插入模板」按钮 → 选择模板文件。 手动补充字段 Obsidian 原生模板语法只支持动态插入时间日期，其他需要自己手动填写。\n","date":"2025-03-06T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/18.jpg","permalink":"https://zero3737.github.io/hugo/p/obsidian-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","title":"obsidian 基础使用教程"},{"content":"前言 知识库目录结构设计：\n临时收集层‌：设立Inbox文件夹存放未整理的零散笔记，作为缓冲区域‌。 时间维度‌：通过Calendar或日期格式文件夹（如2025/03/2025-03-06）管理日记、会议记录等时间敏感内容‌。 主题/领域层‌：按知识领域（如Domains/Science、Domains/Technology）或项目（如Projects/Work）分类核心笔记‌。 功能辅助层‌：设置Sources（文献）、Cards（卡片笔记）等文件夹存放特定类型内容‌。 动态调整机制：\n新笔记先进入Inbox，定期整理后迁移至主题或时间目录‌。 高频使用的笔记可保留在主题目录，低频或完成的项目移至Archive归档文件夹‌。 我这里只保留了草稿区和归档区。assets 用来保存图片和附件，templates 用来存放模板文件。\n实例 方案1，以主题为主，时间为辅，适用场景‌：知识库以学科领域或长期项目为核心。\n1 2 3 4 5 6 7 📂 Knowledge_Base ├─ 📂 Domains # 主题领域 │ ├─ 📂 Science │ └─ 📂 Technology ├─ 📂 Projects # 短期项目 ├─ 📂 Calendar # 时间相关笔记（日记、会议记录） └─ 📂 Inbox # 临时收集区 方案2，时间轴驱动，‌适用场景‌：日记、日常灵感记录为主。\n实现方式‌：\n设置日记模板路径为YYYY/MM/YYYY-MM-DD，按年月自动生成嵌套文件夹‌。 结合标签（如#会议、#灵感）实现跨时间检索。 方案3，功能导向扁平化，适用场景‌：追求快速检索，避免过度分类。\n结构示例‌：\n1 2 3 4 📂 Notes ├─ 📄 2025-03-06-会议纪要 # 直接以日期+标题命名 ├─ 📄 科技趋势分析 # 主题型笔记 └─ 📂 Archive # 低频内容归档 总结 避免过度细分‌：文件夹层级建议不超过3层，依赖搜索和双向链接替代硬性分类‌。 统一命名规则‌：日期格式（如YYYY-MM-DD）、主题前缀（如[科技]XXX）提升可读性‌。 结合插件优化‌：使用Templater自动生成时间目录，或Quick Switcher快速跳转高频文件夹‌。 ","date":"2025-03-06T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/25.jpg","permalink":"https://zero3737.github.io/hugo/p/obsidian-%E7%9F%A5%E8%AF%86%E5%BA%93%E8%AE%BE%E8%AE%A1/","title":"obsidian 知识库设计"},{"content":"前言 符号链接（Symbolic Link）是一种文件系统中的概念，它允许你创建一个指向另一个文件或目录的快捷方式。符号链接在 Windows、Linux 和 Mac 系统中都有支持，但它们的行为和兼容性可能会有所不同。下面我将详细解释符号链接的作用以及为什么在某些情况下可能无法兼容不同路径。\nWindows 使用 在 Windows 系统中，可以使用 mklink 命令来创建符号链接。以下是基本语法：\n1 mklink /D \u0026#34;目标目录\u0026#34; \u0026#34;源目录\u0026#34; 例如，假设你的 Joplin 导出目录是 D:\\JoplinExport，而你的 Obsidian 目录是 C:\\ObsidianVault，你可以使用以下命令在 Obsidian 目录中创建一个指向 Joplin 导出目录的符号链接：\n1 mklink /D \u0026#34;C:\\ObsidianVault\\JoplinExport\u0026#34; \u0026#34;D:\\JoplinExport\u0026#34; Linux 使用 在 Linux 或 Mac 系统中，可以使用 ln -s 命令来创建符号链接。以下是基本语法：\n1 ln -s 源目录 目标目录 例如，假设你的 Joplin 导出目录是 /home/user/JoplinExport，而你的 Obsidian 目录是 /home/user/ObsidianVault，你可以使用以下命令在 Obsidian 目录中创建一个指向 Joplin 导出目录的符号链接：\n1 ln -s /home/user/JoplinExport /home/user/ObsidianVault/JoplinExport 注意事项 符号链接只是创建了一个指向实际文件的快捷方式，如果路径不正确，图片仍然无法显示。 符号链接的路径是相对于创建时的路径。如果目标文件或目录的路径发生变化，符号链接可能会失效。例如，如果你创建了一个符号链接指向 D:\\JoplinExport，但后来将 JoplinExport 文件夹移动到了 D:\\NewFolder，那么原来的符号链接将无法找到目标。 不同的文件系统对符号链接的支持程度不同。例如，NTFS 文件系统支持符号链接，但 FAT32 和 exFAT 文件系统不支持。如果你将符号链接从一个支持的文件系统移动到不支持的文件系统，符号链接可能会失效。 某些应用程序可能不支持符号链接。例如，某些程序可能无法正确解析符号链接，导致无法访问目标文件或目录。这可能是由于程序的设计或安全限制。 在不同操作系统之间移动符号链接可能会导致问题。例如，Windows 和 Linux 系统对符号链接的处理方式不同，如果你在 Windows 上创建了一个符号链接，然后在 Linux 系统上访问，可能会遇到兼容性问题。 不支持符号链接功能‌ exFAT是一种为移动存储设备（如U盘、SD卡）设计的轻量级文件系统，主要目标是‌跨平台兼容性‌（Windows/macOS/Linux）和‌大文件支持‌，但未包含符号链接等高级功能‌。\n与NTFS的对比 ‌ NTFS、ext4等文件系统支持符号链接，因为它们具备更复杂的元数据管理能力。而exFAT的设计简化了文件结构以提高兼容性，牺牲了此类高级特性‌。\n案例 假设你的 Joplin 导出目录是 D:\\JoplinExport，而你的 Obsidian 目录是 C:\\ObsidianVault，你可以使用以下命令在 Obsidian 目录中创建一个指向 Joplin 导出目录的符号链接：\n1 mklink /D \u0026#34;C:\\ObsidianVault\\JoplinExport\u0026#34; \u0026#34;D:\\JoplinExport\u0026#34; 注意，JoplinExport 目录下的资源文件夹一定要存在，不然无法加载资源，例如图片、视频、办公文件等。JoplinExport 目录下存在 images 目录，那么 C:\\ObsidianVault\\JoplinExport 目录下也必须有 images 目录，不然无法加载图片资源。\n软链接与硬链接 一、跨文件系统支持\n软链接：可跨不同文件系统或分区创建，仅需存储目标文件的路径信息即可实现间接引用‌。 硬链接：仅能在同一文件系统内创建，因依赖共享同一inode的特性，无法跨越不同存储设备或分区‌。 二、目标类型支持\n软链接：若目标文件被删除或移动，软链接会失效（成为“悬挂链接”）‌。 硬链接：删除任一硬链接不会影响其他链接，只有当所有硬链接被删除后，文件数据才会被释放‌。 三、目标文件删除后的行为\n软链接：若目标文件被删除或移动，软链接会失效（成为“悬挂链接”）‌。 硬链接：删除任一硬链接不会影响其他链接，只有当所有硬链接被删除后，文件数据才会被释放‌。 ","date":"2025-03-06T00:00:00Z","image":"https://zero3737.github.io/hugo/bg/13.jpg","permalink":"https://zero3737.github.io/hugo/p/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5-mklink/","title":"符号链接 mklink"}]